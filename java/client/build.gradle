buildscript {
    dependencies {
        // This isn't compatible with the `plugins` lookup method, so it has to
        // be declared in a `buildscript` block. See
        // https://github.com/gradle/gradle/issues/1541 for info.
        classpath 'com.guardsquare:proguard-gradle:7.4.2'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.jvm'
}

sourceCompatibility = 17
archivesBaseName = "libsignal-client"

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    main {
        java {
            // Include libsignal sources shared between the client and server
            srcDir '../shared/java'
        }
        kotlin {
            srcDir 'src/main/java'
            srcDir 'src/main/kotlin'
            // Include libsignal sources shared between the client and server
            srcDir '../shared/java'
            srcDir '../shared/kotlin'
        }
        resources {
            srcDir '../shared/resources'
        }
    }
    test {
        java {
            srcDir '../shared/test/java'
        }
        kotlin {
            srcDir 'src/test/java'
            srcDir 'src/test/kotlin'
            srcDir '../shared/test/java'
            srcDir '../shared/test/kotlin'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.googlecode.json-simple:json-simple:1.1'
}

test {
    jvmArgs '-Xcheck:jni'
    testLogging {
        events 'passed','skipped','failed'
        showStandardStreams = true
        showExceptions true
        exceptionFormat 'full'
        showCauses true
        showStackTraces true
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

sourcesJar {
    // Cut down on artifact size by leaving these out of the sources jar.
    exclude '*.dll'
    exclude '*.dylib'
    exclude '*.so'
}

tasks.named('jar') {
    manifest {
        attributes('Automatic-Module-Name': 'org.signal.libsignal')
    }
}

processResources {
    dependsOn ':makeJniLibrariesDesktop'
}

// MARK: Publishing

def nativePlatforms = [
    'darwin_aarch64': [ classifier: 'darwin-aarch64', libFileName: 'libsignal_jni_aarch64.dylib' ],
    'darwin_x64': [ classifier: 'darwin-x86_64', libFileName: 'libsignal_jni_amd64.dylib' ],
    'linux_aarch64': [ classifier: 'linux-aarch64', libFileName: 'libsignal_jni_aarch64.so' ],
    'linux_x64': [ classifier: 'linux-x86_64', libFileName: 'libsignal_jni_amd64.so' ],
    'win_x64': [ classifier: 'win-x86_64', libFileName: 'signal_jni_amd64.dll' ],
]

nativePlatforms.each { platform, props ->
    project.task("nativeLib_${platform}", type: Jar) {
        dependsOn processResources

        archiveBaseName = archivesBaseName
        from(layout.buildDirectory.dir('nativeLibs')) {
            include props['libFileName']
        }

        manifest {
            attributes('Automatic-Module-Name': 'org.signal.libsignalnative')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            version = 'head-SNAPSHOT'
            from components.java

            nativePlatforms.each { platform, props ->
                artifact project.tasks."nativeLib_${platform}" {
                    archiveClassifier.set(props['classifier'])
                }
            }

            pom {
                name = archivesBaseName
                description = 'Signal Protocol cryptography library for Java'
                url = 'https://github.com/signalapp/libsignal'

                scm {
                    url = 'scm:git@github.com:signalapp/libsignal.git'
                    connection = 'scm:git@github.com:signalapp/libsignal.git'
                    developerConnection = 'scm:git@github.com:signalapp/libsignal.git'
                }

                licenses {
                    license {
                        name = 'AGPLv3'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'Signal Messenger LLC'
                    }
                }
            }
        }
    }
}

setUpSigningKey(signing)
signing {
    required { !isSkipSigning() && isReleaseBuild() && gradle.taskGraph.hasTask(":client:publish") }
    sign publishing.publications.mavenJava
}
