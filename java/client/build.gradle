buildscript {
    dependencies {
        // This isn't compatible with the `plugins` lookup method, so it has to
        // be declared in a `buildscript` block. See
        // https://github.com/gradle/gradle/issues/1541 for info.
        classpath 'com.guardsquare:proguard-gradle:7.4.2'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "com.google.protobuf" version "0.9.4"
}

sourceCompatibility = 17
archivesBaseName = "libsignal-client"

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    main {
        java {
            // Include libsignal sources shared between the client and server
            srcDir '../shared/java'
        }
        resources {
            srcDir '../shared/resources'
        }
        proto {
            srcDir '../../proto'
        }
    }
    test {
        java {
            srcDir '../shared/test/java'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.24.4'
    }
}

dependencies {
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.24.4'
    testImplementation 'junit:junit:4.13'
}

test {
    jvmArgs '-Xcheck:jni'
    testLogging {
        events 'passed','skipped','failed'
        showStandardStreams = true
        showExceptions true
        exceptionFormat 'full'
        showCauses true
        showStackTraces true
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

sourcesJar {
    // Cut down on artifact size by leaving these out of the sources jar.
    exclude '*.dll'
    exclude '*.dylib'
    exclude '*.so'
}

tasks.named('jar') {
    manifest {
        attributes('Automatic-Module-Name': 'org.signal.libsignal')
    }
}

processResources {
    dependsOn ':makeJniLibrariesDesktop'
}

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn jar
    injars jar.archiveFile

    // Include the runtime classes (java.lang.Class, for example)
    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'

    configuration '../shared/resources/META-INF/proguard/libsignal.pro'
    // Assume for reachability purposes that all public methods are reachable.
    // This isn't a perfect proxy for analysis under whole-program minimization
    // since not all public methods end up being used, but it's good enough.
    // The worry is that an unused-but-public method might call some non-public
    // method, so our analysis here would find the second one reachable, but
    // whole-program minimization would detect it as unreachable. This is
    // unlikely enough in practice that we aren't going to try harder to catch
    // it.
    keep 'public class org.signal.libsignal.** { public *; }'

    def destinationDirectory = layout.buildDirectory.dir("proguard").get()
    outputs.dir(destinationDirectory)

    printseeds destinationDirectory.file("seeds.txt")
    printusage destinationDirectory.file("usage.txt")
    printmapping destinationDirectory.file("mapping.txt")
}

task diffUnusedProguard {
    dependsOn proguard
    def expected = file('./proguard-usage.txt.expected')
    def actual = proguard.outputs.getFiles().filter({ f -> f.name == "usage.txt"}).singleFile

    inputs.file(expected)
    inputs.file(actual)

    doLast {
        if (expected.text != actual.text) {
            logger.error "${expected} and ${actual} differ"
            logger.error "==== Begin expected contents"
            logger.error expected.text
            logger.error "==== End expected contents"

            logger.error "==== Begin actual contents"
            logger.error actual.text
            logger.error "==== End actual contents"

            logger.error "If this is expected, run the following to fix this:"
            logger.error "\$ cp ${actual} ${expected}"
            throw new GradleException("${expected} and ${actual} differ")
        }
    }
}
test {
    dependsOn diffUnusedProguard
}

// MARK: Publishing

def nativePlatforms = [
    'darwin_aarch64': [ classifier: 'darwin-aarch64', libFileName: 'libsignal_jni_aarch64.dylib' ],
    'darwin_x64': [ classifier: 'darwin-x86_64', libFileName: 'libsignal_jni_amd64.dylib' ],
    'linux_aarch64': [ classifier: 'linux-aarch64', libFileName: 'libsignal_jni_aarch64.so' ],
    'linux_x64': [ classifier: 'linux-x86_64', libFileName: 'libsignal_jni_amd64.so' ],
    'win_x64': [ classifier: 'win-x86_64', libFileName: 'signal_jni_amd64.dll' ],
]

nativePlatforms.each { platform, props ->
    project.task("nativeLib_${platform}", type: Jar) {
        dependsOn processResources

        archiveBaseName = archivesBaseName
        from(layout.buildDirectory.dir('nativeLibs')) {
            include props['libFileName']
        }

        manifest {
            attributes('Automatic-Module-Name': 'org.signal.libsignalnative')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java

            nativePlatforms.each { platform, props ->
                artifact project.tasks."nativeLib_${platform}" {
                    archiveClassifier.set(props['classifier'])
                }
            }

            pom {
                name = archivesBaseName
                description = 'Signal Protocol cryptography library for Java'
                url = 'https://github.com/signalapp/libsignal'

                scm {
                    url = 'scm:git@github.com:signalapp/libsignal.git'
                    connection = 'scm:git@github.com:signalapp/libsignal.git'
                    developerConnection = 'scm:git@github.com:signalapp/libsignal.git'
                }

                licenses {
                    license {
                        name = 'AGPLv3'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'Signal Messenger LLC'
                    }
                }
            }
        }
    }
}

setUpSigningKey(signing)
signing {
    required { !isSkipSigning() && isReleaseBuild() && gradle.taskGraph.hasTask(":client:publish") }
    sign publishing.publications.mavenJava
}
